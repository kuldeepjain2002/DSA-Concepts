class Solution {
public:
    void sol(string &s, vector<int> &z){
        int l, r, k;
        z[0]=0;
        l =0; r=0;
        int n = s.size();

        for(int i =1; i<n; i++){
            if(i>r){
                l =i;
                r =i;
                while(s[r]==s[r-l]){
                    r++;
                }
                z[i]= r-l;
                r--;
            }
            else{
                k= i-l;
                if(z[k]<r-i +1){
                    z[i]= z[k];
                }
                else{
                    l = i ;
                    while(r<n && s[r]== s[r-l]){
                        r++;
                    }
                }
                z[i] = r-l;
                r--;
            }
        }
    }

    void kmp(string &s, vector<int> &z){
        int len =0;
        z[0] =0;
        int n = s.size();
        int i =1;
        while(i<n){
            if(s[i]==s[len]){
                len++;
                z[i] = len;
                i++;
            }
            else{
                if(len ==0){
                    z[i] = 0;
                    i++;
                }
                else{
                    len = z[len-1];
                }
            }
        }
    }

    int strStr(string haystack, string needle) {
        string s = needle +"%" + haystack;
        int n = s.size();
        vector<int> z(n);
        kmp(s,z);

        for(int i =0; i<n; i++){
            // cout<<z[i]<<endl;
            if(z[i]==needle.size() ){
                
                return i- 2*needle.size();
            }
        }
        return -1;
    }
};