Question : Given a tree T of N nodes, where each node i has Ci coins attached with it. You have to choose a subset of nodes such that no two adjacent nodes(i.e. nodes connected directly by an edge) are chosen and sum of coins attached with nodes in chosen subset is maximum.


vector<int> dp1;
vector<int>dp2;

void dfs(int v, int pv, vector<vector<int>> &adj){
	int sum1 =0;
	int sum2 = 0;
	for(auto x : adj[v]){
		if(x==pv)continue;
		dfs(x,v,adj);
		sum1 += dp2[x];
		sum2 += max(dp1[x], dp2[x]);
	}
	sum1+= c[v];
	dp1[x] = sum1;
	dp[2] = sum2;
	return ;
	
}

int main(){
	int n;
    cin >> n;
    vector<vector<int>> adj(n);
	
    for(int i=1; i<n; i++){
	    cin >> u >> v;
	    adj[u].push_back(v);
	    adj[v].push_back(u);
    }
    vector<int> c(n);
    for(int i=0; i<n; i++){
	    cin>>c[i];
    }
    
	dp1.resize(n,-1);
	dp2.resize(n,-1);
	
    dfs(1, 0);
    int ans = max(dp1[1], dp2[1] , adj);
    cout << ans << endl;
	
	return 0;
}