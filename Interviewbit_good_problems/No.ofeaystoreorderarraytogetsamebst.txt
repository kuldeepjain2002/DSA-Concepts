class Solution {
public:
    vector<vector<long long>> nCrdp;
    int mod = 1e9+7;
    int nCr(long long n, long long r){
        if(r > n){
            return 0;
        }
        if(n<=1) return 1;
        if(r==0) return 1;
        if(r==1) return n;
        if(nCrdp[n][r]!=-1)return nCrdp[n][r];
        return nCrdp[n][r] = (nCr(n-1,r) + nCr(n-1,r-1))%mod;
    }

    long long ans ;

    void sol(vector<int>& nums){
        cout<<nums.size()<<endl;
        if(nums.size()<=2)return ;
        int root = nums[0];
        vector<int> left;
        vector<int> right;
        for(int i =1; i<nums.size(); i++){
            if(nums[i]<root)left.push_back(nums[i]);
            else right.push_back(nums[i]);
        }
        ans = (ans*(nCr(left.size()+ right.size(), left.size()))%mod)%mod;
        // cout<<left.size()<<right.size()<<endl;
        sol(left);
        sol(right);

    }

    int numOfWays(vector<int>& nums) {
        int n = nums.size();
        nCrdp.clear();
        nCrdp.resize(n+1,vector<long long>(n+1,-1));
        ans = 1;
        // cout<<"ok"<<endl;
        sol(nums);
        return ans-1;
    }
};