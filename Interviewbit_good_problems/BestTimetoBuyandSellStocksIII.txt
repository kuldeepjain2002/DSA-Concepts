int Solution::maxProfit(const vector<int> &A) {
    int n  = A.size();
    vector<int>left(n,0);
    vector<int>right(n,0);
    int mn = A[0];
    int mx = A[n-1];
    int ans =0;
    for(int i =0; i<n; i++){
        if(mn<A[i]){
            left[i] = A[i]-mn;
            ans= max(ans,left[i]);
        }
        if(i>0){
            left[i] = max(left[i], left[i-1]);
        }
        mn = min(mn, A[i]);
    }
    for(int i = n-1; i>=0; i--){
        if(mx>A[i]){
            right[i] = mx-A[i];
            ans = max(ans, right[i]);
        }
        if(i!=n-1){
            right[i] = max(right[i], right[i+1]);
        }
        mx = max(A[i], mx);
    }
    
    for(int i =0; i<n-1; i++){
        ans = max(ans, left[i]+right[i+1]);
    }
    
    return ans;
}
