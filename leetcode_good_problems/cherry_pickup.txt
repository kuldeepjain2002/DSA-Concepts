class Solution {
public:
    int dp[102][51][51];

    int sol(int sm,int j,int l, vector<vector<int>>& grid){
        int i = sm -j;
        int k = sm - l;
        int n = grid.size();
        if(i==n-1 && j == n-1){
            if(grid[i][j]!= -1)return grid[i][j];
            else return -1e8;
        }
        if(dp[sm][j][l]!=-1) return dp[sm][j][l];
        int ans =0;
        if(grid[i][j]==1 && grid[k][l]==1){
            if(!(i==k && j==l))ans =2;
            else ans =1;
        }
        else if(grid[i][j]==1 || grid[k][l]==1){
            ans = 1;
        }
        // down && down
        int mxans = -1e8;
        if(i+1<n && k+1<n && grid[i+1][j]!=-1 && grid[k+1][l]!=-1){
            mxans = max(mxans,ans+ sol(sm+1,j,l, grid));
        }
        // down & right
        if(i+1<n && l+1<n && grid[i+1][j]!=-1 && grid[k][l+1]!=-1){
            mxans = max(mxans, ans+ sol(sm+1,j,l+1, grid));
        }
        // / right & right
        if(j+1<n && l+1<n && grid[i][j+1]!=-1 && grid[k][l+1]!=-1){
            mxans = max(mxans, ans+ sol(sm+1,j+1,l+1, grid));
        }
        // right & down
        if(j+1<n && k+1<n && grid[i][j+1]!=-1 && grid[k+1][l]!=-1){
            mxans = max(mxans, ans+ sol(sm+1,j+1,l, grid));
        }

        return dp[sm][j][l]= mxans;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        for(int i =0; i<=2*n+1; i++){
            for(int j =0; j<=n; j++){
                for(int k =0; k<=n; k++){
                    dp[i][j][k]=-1;    
                }
            }
        }
        long long ans =  sol(0,0,0,grid);
        if(ans<=0)return 0;
        else return (int)ans;
    }
};